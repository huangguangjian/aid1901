回顾
1.SOI七层模型，tcp/ip模型
2.三次握手和四次挥手
3.TCP和UDP的区别
4.网络概念：网络主机，端口，ip地址，域名
5.套接字编程：网络编程技术手段
  流式套接字：TCP传输
  数据报套接字：UDP传输
6. tcp 套接字编程
   服务端： socket() -->bind() -->listen() -->accept()
     --> recv/send -->close()

   客户端： socket() -->connect() -->send/recv -->close()

********************************************************
新内容
一、tcp套接字数据传输特征

1.tcp 连接中当一端退出，另一端如果阻塞在recv，此时recv会立即返回一个空字符串。
2.tcp 谅解中如果一段已经不存在，再试图通过send发送则会发生BrokenPipeError
3.网络收发缓冲区 
  【1】网络缓冲区有效的协调了消息的收发速度
  【2】send和recv实际是发别向缓冲取发送接收内容，当缓冲区不为空时，recv就不会阻塞
      send发送到缓冲区的内容可能recv分几次从缓冲区接收，也可能send几次发送的内容
      recv一次性接受完
4.tcp粘包
  【1】原因：tcp以字节流的方式传输，没有消息边界。多次发送的消息被一次接收，此时形成粘包。
  【2】影响：如果每次发送的内容是一个独立的含义时，需要接收端单独解析，此时粘包会有影响
  【3】处理粘包:1. 人为增加消息边界
              2. 控制发送速度
二、UDP套接字编程
1.服务端流程
  【1】.创建udp套接字
  sockfd = socket(AF_INET,SOCK_DGRAM)
  【2】.绑定地址
  sockfd.bind(addr)
  3.消息收发
  data,addr = sockfd.recvfrom(buffersize)
  功能：就收udp消息
  参数：每次最多接收多少字节
  返回值: data 接收到的数据
         addr 消息发送者的地址
  n = sockfd.sendto(data,addr)
  功能：发送udp消息
  参数: data 要发送的内容 bytes
       addr 目标地址
  返回值： 发送的字节数
  4. 关闭套接字
  sockfd.close()

2.客户端流程
  【1】创建套接字
    sockfd = socket(AF_INET,SOCK_DGRAM)
  【2】消息收发
  【3】关闭套接字

总结: tcp套接字编程和udp套接字编程差异
  1.流式套接字以字节流的方式传输数据，数据报套接字以数据报形式传输
  2.tcp套接字会有粘包，udp套接字有消息边界不存在粘包
  3.tcp套接字保证消息的完整性，udp则不能保证
  4.tcp套接字依赖listen，accept建立连接，udp套接字无连接
  5.tcp使用send，recv收发消息，udp使用sendto，recvfrom

  补充函数： sendall()
           功能： 发送tcp消息
           参数： 要发送的内容
           返回值： 发送失败得到异常，成功None

三、 socket 模块方法 和 套接字属性 
  1.部分socket模块方法
    【1】 gethostname() 获取计算机名
    【2】 gethostbyname('www.baidu.com') 获取主机ip
    【3】 getservbyname('mysql') 获取服务端口号
    【4】 getservbyport(3306) 获取端口对应服务         

  2.套接字属性
    【1】 sockfd.type  套接字类型
    【2】 sockfd.family 地址类型
    【3】 sockfd.getsockname() 获取套接字绑定地址
    【4】 sockfd.fileno() 获取套接字的文件描述符（>=3的正整数，不重复，及时关闭io操作可以释放文件描述符资源）
          sys.stdin.fileno()=0
          sys.stdout.fileno()=1
          sys.stderr.fileno()=2
          文件描述符：系统中每个IO操作（对象）都会分配一个整数编号，
          该整数即这个IO操作的文件描述符
          特点：文件描述符是系统用来区分处理IO的标志，没哟个IO不会重复

    【5】 sockfd.getpeername() 获取连接套接字看客户端地址
    【6】 sockfd.setsockopt(level,option,value)
         功能： 设置套接字选项
         参数： level 选项类别    SOL_SOCKET
               option 具体选项   SO_REUSEADDR
               value  选项值     布尔类型
    【7】 sockfd.getsockopt(level,option)
         功能：获取套接字选项值
         参数：level   选项累呗
              option   具体选项 
         返回值：获取到的值（元组） 

四、 UDP套接字之广播

    广播： 一点播放，多点接收
    广播地址：一个网段中最大的地址（255），用于发送广播，此时该网段所有终端都能够接收
    

五、 TCP应用之http传输
   1.HTTP协议(应用层协议) (超文本传输协议)
     【1】 用途：数据传输方案，主要应用于网页的传输
     【2】 特点：应用程序协议，传输层使用tcp传输
               简单、灵活、方便操作
               请求类型丰富
               无状态，不记录传输内容
     【3】 网页请求过程
         1.客户端（浏览器）组织请求内容为http协议格式
         2.客户端将请求内容使用tcp发送给服务端
         3.服务端接收到http请求内容进行解析
         4.服务端组织需要的数据
         5.服务端将数据组织为http响应格式发送给客户端
         6.客户端收到服务端反馈，解析展示给用户          
   2.HTTP请求 (request)
      【1】请求行（重要重要重要）  具体的请求类别和请求内容
          1.格式： GET        /       HTTP/1.1
               请求类别   请求内容   版本信息

          2.请求类型 用于表示向服务器做不同类别事件请求
            GET：    获取网络资源
            POST    提交一定的信息得到反馈
            HEAD    只获取网络资源响应头信息
            PUT     更新服务器资源
            DELETE  删除服务器资源
            CONNECT  预留项
            TRACE   测试
            OPTIONS 获取服务器性能信息
          3.请求内容：表示要获取的具体内容信息 具体表现为文件路径 

      【2】请求头： 对请求的进一步解释阐述  键值对格式 每个占一行
          Accept-Encoding：gzip  
      【3】空行
      【4】请求体：对请求内容更具体的需求表达（如网页中的分页内容）,参数
  
   3. HTTP响应 (response)
      【1】 响应行：反馈基本的响应情况  占一行
          1.格式： HTTP/1.1        200        OK
                 协议版本         响应码      附加信息
          2.响应码:  1xx 提示信息，表示请求被接受
                    2xx 响应成功
                    3xx 响应需要进一步处理，重定向
                    4xx 客户端错误
                    5xx 服务器错误
      【2】 响应头： 对响应内容的描述
           Content-Type: text/html 

      【3】 空行
      【4】 响应体：响应的主题内容                  

作业: 1.使用tcp完成一个文件传输任务，将文件从客户端发送给服务端，
       要求文件可以使文本也可以是图片
     2.记住http请求的格式和每部分功能
     3.能自己写出tcp和udp基础代码
